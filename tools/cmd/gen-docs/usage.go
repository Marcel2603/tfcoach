//go:build tfcoach_tools

package main

import (
	"bytes"
	"cmp"
	"fmt"
	"log"
	"os"
	"slices"
	"strings"

	"github.com/Marcel2603/tfcoach/cmd"
	"github.com/spf13/cobra"
	"github.com/spf13/cobra/doc"
)

func collectCommands(cmd *cobra.Command) []*cobra.Command {
	cmds := []*cobra.Command{cmd}
	for _, c := range cmd.Commands() {
		cmds = append(cmds, collectCommands(c)...)
	}
	return cmds
}

// FIXME: make this independent of the developer's config
func GenerateUsage(filename string) {
	var buf bytes.Buffer
	buf.WriteString("# Usage \n")

	cmds := collectCommands(cmd.GetRootCommand())
	slices.SortStableFunc(cmds, func(a, b *cobra.Command) int {
		return cmp.Compare(a.CommandPath(), b.CommandPath())
	})

	for _, command := range cmds {
		var section bytes.Buffer

		err := doc.GenMarkdownCustom(
			command,
			&section,
			func(_ string) string {
				// Mark links to be deleted
				return "delete_me"
			},
		)
		if err != nil {
			log.Fatalf("error generating markdown for %s: %v", command.Name(), err)
		}

		commandString := section.String()
		commandString += generateReturnCodeDocs(command)
		out := cleanMarkdown(commandString)

		buf.WriteString(out)
		buf.WriteString("\n")
	}

	if err := os.WriteFile(filename, buf.Bytes(), 0644); err != nil {
		log.Fatal(err)
	}
}

func cleanMarkdown(s string) string {
	lines := strings.Split(s, "\n")
	var cleaned []string

	for _, line := range lines {
		if strings.HasPrefix(line, "### SEE ALSO") ||
			strings.Contains(line, "Auto generated by spf13/cobra") ||
			strings.Contains(line, "delete_me") {
			continue
		}
		cleaned = append(cleaned, line)
	}

	s = strings.Join(cleaned, "\n")

	return strings.TrimSpace(s) + "\n"
}

func generateReturnCodeDocs(command *cobra.Command) string {
	var result string
	if note, ok := command.Annotations["exitCodes"]; ok {
		result += "### Exit Codes\n\n"
		result += "| Code | Meaning|\n"
		result += "|------|--------|\n"
		for _, exitStr := range strings.Split(note, ",") {
			codeAndMeaning := strings.SplitN(exitStr, ":", 2)
			result += fmt.Sprintf("| %s | %s |\n", codeAndMeaning[0], codeAndMeaning[1])
		}
	}
	return result
}
