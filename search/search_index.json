{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"tfcoach","text":"<p>A lightweight Terraform linter that enforces team conventions.</p> <ul> <li>Fast CLI built with Cobra</li> <li>Simple rule engine</li> <li>CI-friendly output and exit codes</li> </ul> <pre><code>go install github.com/Marcel2603/tfcoach@latest\ntfcoach lint .\n</code></pre>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#install","title":"Install","text":"<pre><code>go install github.com/Marcel2603/tfcoach@latest\n</code></pre>"},{"location":"getting-started/#first-run","title":"First run","text":"<pre><code>tfcoach lint .\n</code></pre>"},{"location":"rule-ideas/","title":"Ideas","text":"<p>This page contains ideas about up-coming rules.</p>"},{"location":"rule-ideas/#core","title":"Core","text":"<ul> <li>Required Provider in terraform block</li> <li>naming</li> <li>plural for lists</li> <li>no resource-type in name</li> <li>name_convention (done)</li> <li>output-format {name}{type}{attribute}</li> <li>file names</li> <li>variables in variables.tf</li> <li>outputs in output.tf</li> <li>etc</li> <li>placement</li> <li>tags</li> <li>for_each / count</li> <li>remote_backend?</li> <li>terraform_data instead of null</li> <li>only one tf block</li> <li>variables always needs description</li> </ul>"},{"location":"usage/","title":"Usage","text":"<pre><code>tfcoach lint [path]\n</code></pre> <p>Exit codes:</p> <ul> <li>0: no issues</li> <li>1: issues found</li> <li>2: runtime error</li> </ul>"},{"location":"about/license/","title":"License","text":"<p>tfcoach is licensed under the Apache License 2.0. See the LICENSE file for details.</p>"},{"location":"about/security/","title":"Security Policy","text":""},{"location":"about/security/#supported-versions","title":"Supported Versions","text":"<p>Only the latest release of tfcoach is supported with security updates. Users are encouraged to always upgrade to the most recent version.</p>"},{"location":"about/security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>If you discover a security vulnerability, please report it via the GitHub Security Advisories page of this repository.</p> <p>Do not disclose security issues publicly until they have been addressed.</p> <p>We will review and respond to all reports as quickly as possible.</p>"},{"location":"development/contributing/","title":"Contributing","text":"<p>We welcome contributions!</p> <ul> <li>Fork the repo and create a feature branch.</li> <li>Add tests for new rules or features.</li> <li>Run <code>make test</code> before submitting a PR.</li> <li>Ensure your commits are signed.</li> </ul> <p>Thank you for improving tfcoach!</p>"},{"location":"development/conventions/","title":"Writing rules","text":"<p>Rules implement:</p> <pre><code>type Rule interface {\n  ID() string\n  META() engine.RuleMeta\n  Apply(file string, f *hcl.File) []engine.Issue\n}\n</code></pre> <p>Parse with <code>hclsyntax.ParseConfig</code>, iterate <code>body.Blocks</code>, or use the optional AST walker for nested/expr-heavy checks. Return issues with precise <code>hcl.Range</code>. Keep rules single-purpose and fast.</p> <p>The ID follows this patter <code>package.name</code></p>"},{"location":"rules/","title":"Rules","text":""},{"location":"rules/#core","title":"Core","text":"ID Rule Summary core.naming_convention NamingConvention terraform names should only contain lowercase alphanumeric characters and underscores core.file_naming File Naming File naming should follow a strict convention."},{"location":"rules/core/file_naming/","title":"core.file_naming","text":"<p>Enforces that different type of terraform-resources are written in the correct files</p>"},{"location":"rules/core/file_naming/#why","title":"Why","text":"<p>Consistent file-structure across multiple projects. Keeps scalability and error analysis simple.</p> <p>Example \"I want to see resources that i load from external (data-resources). I can just open data.tf\"</p>"},{"location":"rules/core/file_naming/#mapping-tf-type-to-file","title":"Mapping TF-Type to File","text":"Type Filename output outputs.tf variable variables.tf locals locals.tf provider providers.tf terraform terraform.tf data data.tf"},{"location":"rules/core/naming_convention/","title":"core.naming_convention","text":"<p>Enforce the naming convention.</p>"},{"location":"rules/core/naming_convention/#why","title":"Why","text":"<p>Consistent naming improves module reuse and keeps downstream references simple.</p>"},{"location":"rules/core/naming_convention/#triggers","title":"Triggers","text":"<ul> <li>Any block whose not following the naming convention <code>a-z0-9_</code>.</li> </ul>"},{"location":"rules/core/naming_convention/#example","title":"Example","text":""},{"location":"rules/core/naming_convention/#bad","title":"Bad","text":"<pre><code>resource \"aws_s3_bucket\" \"Foo\" {}\n</code></pre>"},{"location":"rules/core/naming_convention/#good","title":"Good","text":"<pre><code>resource \"aws_s3_bucket\" \"foo\" {}\n</code></pre>"}]}