{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"tfcoach","text":"<p>A lightweight Terraform linter that enforces team conventions.</p> <ul> <li>Fast CLI built with Cobra</li> <li>Simple rule engine</li> <li>CI-friendly output and exit codes</li> </ul> <pre><code>go install github.com/Marcel2603/tfcoach@latest\ntfcoach lint .\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<p>You can configure tfcoach via file and partially via env.</p> <p>To configure via file, you need to create one of the following files in the same directory where you execute tfcoach:</p> <ul> <li>.tfcoach</li> <li>.tfcoach.json</li> <li>.tfcoach.y[a]ml</li> </ul> <p>Syntax for \".tfcoach\" is JSON.</p> <p>The configurations are applied in the following order, so that each potentially overrides values from the previous ones:</p> <ul> <li>Default config from the repository</li> <li>User config using one of the above-mentioned files</li> <li>Environment variables</li> <li>Command flags</li> </ul>"},{"location":"configuration/#what-can-you-configure","title":"What can you configure","text":"<p>Example <code>.tfcoach.yml</code>:</p> <pre><code>rules:  # map to restrict rule configurations\n  rule_id:  # rule_id of the rule you want to configure\n    enabled: false  # decide to enable or disable the rule (enabled by default)\n    spec: {}  # config specific configuration, see rule documentation\noutput:\n  format: pretty  # see \"--help\" for supported output formats\n  color: true  # enable or disable color; if set to false, equivalent to the \"--no-color\" flag\n  emojis: true  # enable or disable emojis; if set to false, equivalent to the \"--no-emojis\" flag\n</code></pre>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#install","title":"Install","text":"<pre><code>go install github.com/Marcel2603/tfcoach@latest\n</code></pre>"},{"location":"getting-started/#first-run","title":"First run","text":"<pre><code>tfcoach lint .\n</code></pre>"},{"location":"rule-ideas/","title":"Ideas","text":"<p>This page contains ideas about up-coming rules.</p>"},{"location":"rule-ideas/#core","title":"Core","text":"<ul> <li>Required Provider in terraform block</li> <li>naming</li> <li>plural for lists</li> <li>no resource-type in name</li> <li>name_convention (done)</li> <li>output-format {name}{type}{attribute}</li> <li>file names</li> <li>variables in variables.tf</li> <li>outputs in output.tf</li> <li>etc</li> <li>placement</li> <li>tags</li> <li>for_each / count</li> <li>remote_backend?</li> <li>terraform_data instead of null</li> <li>only one tf block</li> <li>variables always needs description</li> </ul>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#tfcoach","title":"tfcoach","text":"<p>Tiny Terraform coach</p> <pre><code>tfcoach [flags]\n</code></pre>"},{"location":"usage/#options","title":"Options","text":"<pre><code>  -h, --help   help for tfcoach\n</code></pre>"},{"location":"usage/#exit-codes","title":"Exit Codes","text":"Code Meaning 0 OK"},{"location":"usage/#tfcoach-lint","title":"tfcoach lint","text":"<p>Lint Terraform files</p> <pre><code>tfcoach lint [path] [flags]\n</code></pre>"},{"location":"usage/#options_1","title":"Options","text":"<pre><code>  -f, --format string   Output format. Supported: json|compact|pretty|educational (default \"educational\")\n  -h, --help            help for lint\n      --no-color        Disable color output\n      --no-emojis       Prevent emojis in output\n</code></pre>"},{"location":"usage/#exit-codes_1","title":"Exit Codes","text":"Code Meaning 0 No issues found 1 Issues found 2 Runtime error"},{"location":"usage/#tfcoach-version","title":"tfcoach version","text":"<p>Print the version number</p> <pre><code>tfcoach version [flags]\n</code></pre>"},{"location":"usage/#options_2","title":"Options","text":"<pre><code>  -h, --help   help for version\n</code></pre>"},{"location":"usage/#exit-codes_2","title":"Exit Codes","text":"Code Meaning 0 OK"},{"location":"about/license/","title":"License","text":"<p>tfcoach is licensed under the Apache License 2.0. See the LICENSE file for details.</p>"},{"location":"about/security/","title":"Security Policy","text":""},{"location":"about/security/#supported-versions","title":"Supported Versions","text":"<p>Only the latest release of tfcoach is supported with security updates. Users are encouraged to always upgrade to the most recent version.</p>"},{"location":"about/security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>If you discover a security vulnerability, please report it via the GitHub Security Advisories page of this repository.</p> <p>Do not disclose security issues publicly until they have been addressed.</p> <p>We will review and respond to all reports as quickly as possible.</p>"},{"location":"development/","title":"Contributing","text":"<p>We welcome contributions!</p> <ul> <li>Fork the repo and create a feature branch.</li> <li>Add tests for new rules or features.</li> <li>Run <code>make test</code> before submitting a PR.</li> <li>Ensure your commits are signed.</li> </ul> <p>Thank you for improving tfcoach!</p>"},{"location":"development/#semantic-commits","title":"Semantic Commits","text":"<p>We are using conventional commits to release this project. To streamline the whole process, we have enabled squash-commits on merge. So you just need to name your pr correctly.</p>"},{"location":"development/release/","title":"Release","text":"<p>We use Github Action to release using semantic-release and goreleaser.</p>"},{"location":"development/release/#strategy","title":"Strategy","text":"<p>We release as needed, for example if we have added some rules or fixes any bug.</p> <p>The release is currently manually and gets triggered by admins.</p> <p>If you need to get a release, simply create an Issue or mention it in your pr.</p>"},{"location":"development/release/#releaseflow","title":"ReleaseFlow","text":"<pre><code>sequenceDiagram\n    autonumber\n    participant Dev as Developer\n    participant DeployWF as release.yml (orchestrator)\n    participant ReleaseEnvironment as Environment\n    participant ReleaseGate as release-actions.yml (reusable)\n    participant SR as semantic-release\n    participant GH as GitHub (Tags/Releases, GHCR)\n    participant GR as GoReleaser\n\n    Dev-&gt;&gt;DeployWF: manual dispatch Release-Gate\n    DeployWF-&gt;&gt;ReleaseEnvironment: wait for approval\n    Dev-&gt;&gt;ReleaseEnvironment: Approve Deployment\n    ReleaseEnvironment-&gt;&gt;DeployWF: Start deployment\n    DeployWF-&gt;&gt;Release: uses: ./.github/action/action.yml\n    Release-&gt;&gt;SR: analyze commits (conventional commits)\n    SR--&gt;&gt;ReleaseGate: decision (release? yes/no)\n    alt New release\n        SR-&gt;&gt;GH: generate changelog + create tag + release\n        ReleaseGate--&gt;&gt;DeployWF: outputs {released:true, tag:vX.Y.Z, version:X.Y.Z}\n        DeployWF-&gt;&gt;GH: checkout ref = tag\n        DeployWF-&gt;&gt;GR: build artifacts (binaries)\n        DeployWF-&gt;&gt;GH: publish release assets\n        DeployWF-&gt;&gt;GH: buildx + push Docker images to GHCR\n    else No release\n        ReleaseGate--&gt;&gt;DeployWF: outputs {released:false}\n        DeployWF--x GH: skip build &amp; push\n    end\n</code></pre>"},{"location":"development/release/#artifacts","title":"Artifacts","text":"<p>We release multiple artifacts:</p> Type Arc Link Docker Container arm64 and amd64 for linux https://github.com/Marcel2603/tfcoach/pkgs/container/tfcoach%2Ftfcoach Executable arm64 and amd64 for linux/darwin/windows https://github.com/Marcel2603/tfcoach/releases"},{"location":"development/rule-conventions/","title":"Writing rules","text":"<p>Rules implement:</p> <pre><code>type Rule interface {\n  ID() string\n  META() RuleMeta\n  Apply(file string, f *hcl.File) []Issue\n  Finish() []Issue\n}\n</code></pre> <p>Parse with <code>hclsyntax.ParseConfig</code>, iterate <code>body.Blocks</code>, or use the optional AST walker for nested/expr-heavy checks. Return issues with precise <code>hcl.Range</code>. Keep rules single-purpose and fast.</p> <p>Depending on what the rule needs to assert, you may report issues for each file independently (in <code>Apply</code>) or collect information and report after all files have been checked (in <code>Finish</code>).</p> <p>The ID follows this pattern: <code>package.name</code></p>"},{"location":"development/tools/","title":"Tools","text":"<p>Tools are go-scripts that help your local development. They will not be bundled to tfcoach.</p>"},{"location":"development/tools/#requirements","title":"Requirements","text":"<ul> <li>Create a folder under <code>tools</code></li> <li>Exclude it from go build by adding <code>//go:build tfcoach_tools</code> as first line</li> </ul>"},{"location":"development/tools/gen-docs/","title":"Generate Doc Pages","text":"<p>This tool will generate the following pages from the code:</p> <ul> <li>Rules Overview (uses information from internal api)</li> <li>Usage (uses cobra doc package)</li> </ul>"},{"location":"development/tools/gen-docs/#how-to-execute","title":"How to execute","text":"<pre><code>make generate-documentation\n</code></pre>"},{"location":"development/tools/hcl-test/","title":"HCL Testing","text":"<p>This tool helps to understand the hcl-syntax api.</p>"},{"location":"development/tools/hcl-test/#how-to-execute","title":"How to execute","text":"<pre><code>go run tools/cmd/hcl-test/main.go examples/compliant/main.tf  \n</code></pre> <ul> <li>It will print what hcl will parse, so that you can test with the syntax tree</li> </ul>"},{"location":"rules/","title":"Rules","text":""},{"location":"rules/#core","title":"Core","text":"Rule Summary Avoid using hashicorp/null provider With never Terraform version, use locals and terraform_data as native replacement for hashicorp/null Enforce Variable Description To understand what that variable does (even if it seems trivial), always add a description File Naming File naming should follow a strict convention. Naming Convention Terraform names should only contain lowercase alphanumeric characters and underscores. Required Provider Must Be Declared All providers used in resources or data sources are declared in the terraform.required_providers block."},{"location":"rules/core/avoid_null_provider/","title":"core.avoid_null_provider","text":"<p>Enforces that the hashicorp/null  provider is not used.</p>"},{"location":"rules/core/avoid_null_provider/#why","title":"Why","text":"<p>The hashicorp/null provider was widely used in older Terraform versions for \"glue logic\", but it's now considered obsolete and discouraged.</p> <p>You should not use it anymore and replace it with <code>terraform_data</code> for <code>null_resource</code> and <code>locals</code> for <code>null_data_source</code>.</p>"},{"location":"rules/core/avoid_null_provider/#triggers","title":"Triggers","text":"<ul> <li>Any usage of <code>null_resource</code> or <code>null_data_source</code></li> </ul>"},{"location":"rules/core/avoid_null_provider/#example","title":"Example","text":""},{"location":"rules/core/avoid_null_provider/#bad","title":"Bad","text":"<pre><code>resource \"null_resource\" \"config\" {\n  triggers = {\n    config = var.config\n  }\n}\n</code></pre> <pre><code>data \"null_data_source\" \"example\" {\n  inputs = {\n    full_id = \"${var.name}-${var.region}\"\n  }\n}\n</code></pre>"},{"location":"rules/core/avoid_null_provider/#good","title":"Good","text":"<pre><code>resource \"terraform_data\" \"config\" {\n  input = var.config\n}\n\nlocals {\n  full_id = \"${var.name}-${var.region}\"\n}\n</code></pre>"},{"location":"rules/core/avoid_null_provider/#configuration","title":"Configuration","text":"<p>There is currently no configuration flags for that rule, beside the option to enable or disable the rule</p>"},{"location":"rules/core/enforce_variable_description/","title":"core.enforce_variable_description","text":"<p>Enforces that all declared variables have a non-empty description</p>"},{"location":"rules/core/enforce_variable_description/#why","title":"Why","text":"<p>Even though the intent of variables may seem trivial at first, the variable name itself usually does not carry enough information to ensure it stays that way. A good description can save much debugging time.</p>"},{"location":"rules/core/enforce_variable_description/#triggers","title":"Triggers","text":"<ul> <li>Any variables with no description or an empty description</li> </ul>"},{"location":"rules/core/enforce_variable_description/#example","title":"Example","text":""},{"location":"rules/core/enforce_variable_description/#bad","title":"Bad","text":"<pre><code>variable \"test\" {\n  type = string\n}\n</code></pre> <pre><code>variable \"test2\" {\n  type = string\n  description = \"\"\n}\n</code></pre>"},{"location":"rules/core/enforce_variable_description/#good","title":"Good","text":"<pre><code>variable \"test\" {\n  description = \"some descriptive text\"\n  type = string\n}\n</code></pre>"},{"location":"rules/core/enforce_variable_description/#configuration","title":"Configuration","text":"<p>There is currently no configuration flags for that rule, beside the option to enable or disable the rule</p>"},{"location":"rules/core/file_naming/","title":"core.file_naming","text":"<p>Enforces that different type of terraform-resources are written in the correct files</p>"},{"location":"rules/core/file_naming/#why","title":"Why","text":"<p>Consistent file-structure across multiple projects. Keeps scalability and error analysis simple.</p> <p>Example \"I want to see resources that I load from external (data-resources). I can just open data.tf\"</p>"},{"location":"rules/core/file_naming/#mapping-tf-type-to-file","title":"Mapping TF-Type to File","text":"Type Filename output outputs.tf variable variables.tf locals locals.tf provider providers.tf data data.tf"},{"location":"rules/core/file_naming/#mapping-of-terraform-block","title":"Mapping of Terraform Block","text":"<p>The Terraform Block is separated in different files based on Blocks and Attributes. In general, the \"terraform\"-Block is allowed to be in following files:</p> <ul> <li>backend.tf</li> <li>terraform.tf</li> </ul> Filename Blocks Attributes backend.tf cloud, backend terraform.tf required_provider ,provider_meta required_version,experiments"},{"location":"rules/core/file_naming/#configuration","title":"Configuration","text":"<p>There is currently no configuration flags for that rule, beside the option to enable or disable the rule</p>"},{"location":"rules/core/file_naming/#references","title":"References","text":"<ul> <li>https://developer.hashicorp.com/terraform/language/style#file-names</li> </ul>"},{"location":"rules/core/naming_convention/","title":"core.naming_convention","text":"<p>Enforce the naming convention.</p>"},{"location":"rules/core/naming_convention/#why","title":"Why","text":"<p>Consistent naming improves module reuse and keeps downstream references simple.</p>"},{"location":"rules/core/naming_convention/#triggers","title":"Triggers","text":"<ul> <li>Any block whose not following the naming convention <code>a-z0-9_</code>.</li> </ul>"},{"location":"rules/core/naming_convention/#example","title":"Example","text":""},{"location":"rules/core/naming_convention/#bad","title":"Bad","text":"<pre><code>resource \"aws_s3_bucket\" \"Foo\" {}\n</code></pre>"},{"location":"rules/core/naming_convention/#good","title":"Good","text":"<pre><code>resource \"aws_s3_bucket\" \"foo\" {}\n</code></pre>"},{"location":"rules/core/naming_convention/#configuration","title":"Configuration","text":"<p>There is currently no configuration flags for that rule, beside the option to enable or disable the rule</p>"},{"location":"rules/core/required_provider_must_be_declared/","title":"core.required_provider_must_be_declared","text":"<p>Enforce that all providers used in resources or data sources are declared in the <code>terraform.required_providers</code> block.</p>"},{"location":"rules/core/required_provider_must_be_declared/#why","title":"Why","text":"<p>Using non explicitly declared providers usually leads to bugs when trying to apply changes.</p>"},{"location":"rules/core/required_provider_must_be_declared/#triggers","title":"Triggers","text":"<ul> <li>Any <code>resource</code> or <code>data</code> block for which the provider is not declared</li> </ul>"},{"location":"rules/core/required_provider_must_be_declared/#example","title":"Example","text":""},{"location":"rules/core/required_provider_must_be_declared/#bad","title":"Bad","text":"<pre><code>resource \"aws_s3_bucket\" \"this\" {}\n</code></pre>"},{"location":"rules/core/required_provider_must_be_declared/#good","title":"Good","text":"<pre><code>terraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~&gt; 5.0\"\n    }\n  }\n}\n\nresource \"aws_s3_bucket\" \"this\" {}\n</code></pre> <p>Note that the provider declaration and the resource usage do not need to be in the same file.</p>"},{"location":"rules/core/required_provider_must_be_declared/#configuration","title":"Configuration","text":"<p>There is currently no configuration flags for that rule, beside the option to enable or disable the rule</p>"}]}